环境：
centos 7.4
docker 18.0.3
iptables 1.4.21
ip6tables 1.4.21

场景：有若干服务运行于容器中。服务程序需要接收ipv6请求并响应。一下介绍3种解决方案，由简单到复杂，逐个解决简单方案中的缺陷。

  一、利用docker原生特性的ipv6隧道技术方案
  
  最简单的方法在于直接利用docker的ipv6 - > ipv4转发机制。docker容器在创建时可对端口进行映射，将容器端口和主机端口进行绑定。该配置要求容器使用docker的bridge网络模式。
  简单介绍一下端口映射的工作原理。端口映射工作由docker-proxy完成管理。docker-proxy会监听对应端口的ipv4的端口映射是基于docker-proxy管理和创建的iptables规则完成ipv4数据报的转发。当数据进入主机时会有iptables规则匹配，并将其转发到绑定的容器端口。如果数据包没有匹配iptables规则，进入主机用户态，此时由docker-proxy监听的端口接收到数据报也会将数据转发到对应的容器端口。容器对外发送数据时，数据报会经过iptables规则的地址伪装将数据报发送到外部环境。（详细原理可查看dongker网络与iptables）
  而docker的ipv6 ->ipv4方案，不像ipv4一样直接经过ip6tables的转发发送到容器内，数据报首先进入主机用户态，被docker-proxy监听的ipv6端口接收，docker-proxy会将ipv6数据报改造为ipv4数据报发送给容器对应端口，并接受容器发回的ipv4数据报，最后将其改造为ipv6并响应请求。
  创建ipv6 -> ipv4的隧道技术要求在创建容器的时候通过“-p hostPort:containerPort” 形成端口映射。
  
  优点在于：
  1、不需要额外的配置，只要保证ipv6地址可用，实现简单。
  2、对于一些已成型的产品不需要进行新的开发，能快速的满足支持
  缺点在于：
  1、速度慢，因为数据报的来回需要经过docker-proxy的协议改造，数据量越大，速度越慢。一个简单的服务请求响应时间在1-3s，若请求的数据报大，这个时间会更大。
  2、容器无法通过ipv6地址访问容器外的服务。


二、ipv6与ipv4混合方案

  基于第一个方案，解决其中的容器无法通过ipv6地址访问外部服务的问题。解决这个问题，方法不复杂，可以利用ip6tables对容器内向外部发送的数据进行地址伪装，使得ipv6数据能够从容器中经过主机网卡，并从正确的网卡流向外部世界。（该方案需要了解iptables规则使用，详情查看iptables规则）
在docker的bridge网桥中默认不会开启ipv6模式，此时容器内不会分配ipv6地址，容器内服务无法收发ipv6数据报。因此需要为创建的bridge网络启动ipv6。启动方式为创建bridge网络时为创建的网络分配ipv6地址，并启用ipv6。当容器使用该网络时会自动分配ipv6地址。
docker创建ipv6网络命令实例如下，具体地址可自行规划：
  "docker network create --gateway 172.17.0.1 --subnet 172.17.0.1/16 --subnet 20001:250:4001:2001::1/64 --gateway 20001:250:4001:2001::1 --ipv6 ipv6_test"
  当容器启动时可通过"--network ipv6_test"的方式为容器分配网络，容器创建成功过后，容器内部会自动分配ipv6地址。
此时该方案的工作已经完成大半了，此时容器虽然分配了ipv6地址，但是仍然无法访问外部网络的ipv6地址。这是因为容器内访问外部ipv6，数据报经过网桥流入主机后源地址为容器ipv6地址，这个地址无法对被外部网络所认可，该数据报需要经过地址伪装，使其ipv6数据报使用可用的ipv6地址。这个过程可以交给ip6tables规则进行，工作方式与iptables规则类似。
  ipv6数据报经过网桥进入主机时，首先会由PREROUTING -> FORWARD ->OUTPUT ->POSTROUTING等规则链。此时由于没有经过地址伪装，数据报在经过POSTROUTING后无法正确寻址，因此无法访问外部网络。因此我们可以在POSTROUTING处为该数据报加上地址伪装。规则创建指令示例如下：
  “ip6tables -t nat -I POSTROUTING -j MASQUERADE”
  示例指令，将会对每个经过POSTROUTING规则链的数据包经过地址伪装。这是最简单的写法，可以根据需要对精确匹配数据包，例如从数据包源址，流入网卡，流出网卡，类型等进行精确匹配（详情可查看iptables规则，此处不详细介绍）。
  此时可支持容器对外访问。
  优点：
  1、在方案一的基础上，轻微的改造以快速支持容器对外部网络访问
  缺点：
  1、需要管理地址伪装规则，使其持久化，也许需要一个主机系统管理服务来专门维护iptables规则
  2、外部网络通过ipv6访问容器，仍然是通过docker的ipv6 -> ipv4隧道，效率仍然很差


  三、ip6tables规则实现ipv6容器转发
  
  基于方案二的基础上，该方案的大部分基础条件已经可以满足。对于ip6tables规则的管理，一般会利用一个主机上服务进行管理、持久化。那么借鉴docker对ipv4数据转发的原理。可以将其使用在ipv6数据包中。通过ip6tables的管理工具来管理自定义的iptables规则。
  总体来说要简单的实现ipv6数据包由ip6tables实现转发，主要的工作在与配置iptables规则。并将iptables规则持久化管理。ipv6tables规则与iptables规则管理类似。若要完成由主机ipv6到容器的ipv6地址访问，需要在主机上添加目标地址改变的转发规则。例如端口映射，将容器内的端口与主机的端口形成映射，当有ipv6数据包进入主机且目标端口为映射端口时，由iptables规则将对应的数据包转发到容器内。要实现端口映射，最简单的情况下是在PREROUTING规则链中添加DNAT，将接收到的数据包转发给对应的容器。并且在POSTROUTING规则链中添加添加MASQUERADE。前者目的是让外部世界能够访问容器，后者让容器能够访问外部世界。
注意，以上仅仅是最简化的网络设置，复杂情况下还需要考虑网络的隔离（在docker的ipv4数据网络中不同网络间相互隔离）和网络安全性的问题。
至此，基本的ipv6网络环境基本完成。数据可以通过ipv6地址访问容器服务。且数据包不会经过主机用户态，直接由内核负责数据包的转发。其网络工作模式与ipv4类似。
  此时要求容器内部的服务支持接收ipv6数据，因此服务需要开发。

  优点：
  1、通过iptables实现ipv6数据包转发，效率较高
  2、容器能够通过地址伪装使用主机的ipv6地址访问外部网络
  3、由于ip6tables规则由开发者管理，可以动态的添加端口映射
  缺点：
  1、需要开发软件代码，使其支持ipv6数据包的收发
  2、需要开发一个服务管理、维护ip6tables规则

  四、docker提供的ipv6方案
  本方案缺少环境，没有实践。
  docker提供的ipv6方案是主机网卡上存在一个真实可用的ipv6地址，同时还需要一段可配置的使用的同主机网段（或者说子网段）的ipv6地址。通过在创建容器网桥的时候为其分配这段地址，创建容器时使用该网络地址。最后再通过NDP代理（邻接点发现）的方式使得外部世界可以直接通过容器的ipv6地址访问容器。




